// par_test2.vp 
module `mname`(
input logic [3:0] uf,
input logic [3:0] tp,
output logic [7:0] mul,
input logic clk,
input logic rst);

logic [3:0] muluu,mulul,mullu,mulll,muluu_next,mulul_next,mullu_next,mulll_next;
logic [7:0] mul_reg,mul_next,c1,c2;
logic [7:0] add0,add0_next,add1,add1_next,add1a;
always_ff@(posedge clk or negedge rst)
	begin
	if(!rst)
		begin
		muluu<=4'b0;
		mulul<=4'b0;
		mullu<=4'b0;
		mulll<=4'b0;
		mul_reg<=4'b0;
		add1<=5'b0;
		add0<=8'b0;
		end
	else begin
		muluu<=muluu_next;
		mulul<=mulul_next;
		mullu<=mullu_next;
		mulll<=mulll_next;
		mul_reg<=mul_next;
		add1<=add1_next;
		add0<=add0_next;
		end
	end
always_comb
	begin
	muluu_next=uf[3:2]*tp[3:2];
	mulul_next=uf[3:2]*tp[1:0];
	mullu_next=uf[1:0]*tp[3:2];
	mulll_next=uf[1:0]*tp[1:0];
	add0_next={muluu,mulll};
	c1={1'b0,mulul};
	c2={1'b0,mullu};
	add1_next=c1+c2;
	add1a={1'b0,add1,2'b0};
	mul_next=add0+add1a;
	end
assign mul=mul_reg;
endmodule
