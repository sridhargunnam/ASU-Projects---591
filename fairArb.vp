// fairArb.vp
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//; my $bW = parameter( name=>"bitWidth", val=>16, doc=>"Width of input");
module `mname` (
input logic [`$bW-1`:0] bids,
output logic [`$bW-1`:0] wins,
input logic clk,
input logic rst
);
logic [15:0] nxt_wnreg,nxt_wnnxt;
logic [15:0] pr_input,temp_win,bids_tmp;
logic [15:0] sh_amt_nxt,sh_amt_reg,sh_amt_a,sh_amt_b,sh_amt_c;
logic [3:0] memb,position;

always@(posedge clk or negedge rst)
	begin
	if(! rst)
	begin
		nxt_wnreg<=16'd0;
		sh_amt_reg<=16'b0101;
	end
	else
	begin
        nxt_wnreg<=nxt_wnnxt;
		sh_amt_reg<=sh_amt_nxt;
	end
end
assign bids_tmp=bids;
always_comb
begin
// online source to find random number generator
        sh_amt_a = sh_amt_reg ^ (sh_amt_reg >> 5);
	sh_amt_b = sh_amt_a ^ (sh_amt_a << 6);
 	sh_amt_nxt = sh_amt_b ^ (sh_amt_b >> 5);
   		
  case(sh_amt_reg[3:0])
	4'd0:pr_input=bids_tmp;		 
	4'd1:pr_input={bids_tmp[14:0],bids_tmp[15]};		 
	4'd2:pr_input={bids_tmp[13:0],bids_tmp[15:14]};		 
	4'd3:pr_input={bids_tmp[12:0],bids_tmp[15:13]};		 
	4'd4:pr_input={bids_tmp[11:0],bids_tmp[15:12]};		 
	4'd5:pr_input={bids_tmp[10:0],bids_tmp[15:11]};		 
	4'd6:pr_input={bids_tmp[9:0],bids_tmp[15:10]};		 
	4'd7:pr_input={bids_tmp[8:0],bids_tmp[15:9]};		 
	4'd8:pr_input={bids_tmp[7:0],bids_tmp[15:8]};		 
	4'd9:pr_input={bids_tmp[6:0],bids_tmp[15:7]};		 
	4'd10:pr_input={bids_tmp[5:0],bids_tmp[15:6]};		 
	4'd11:pr_input={bids_tmp[4:0],bids_tmp[15:5]};		 
	4'd12:pr_input={bids_tmp[3:0],bids_tmp[15:4]};		 
	4'd13:pr_input={bids_tmp[2:0],bids_tmp[15:3]};		 
	4'd14:pr_input={bids_tmp[1:0],bids_tmp[15:2]};		 
	4'd15:pr_input={bids_tmp[0],bids_tmp[15:1]};		 
	default:pr_input=0;
endcase
case(1)
	pr_input[15]:memb=4'd15;				
	pr_input[14]:memb=4'd14;				
	pr_input[13]:memb=4'd13;				
	pr_input[12]:memb=4'd12;				
	pr_input[11]:memb=4'd11;				
	pr_input[10]:memb=4'd10;				
	pr_input[9]:memb=4'd9;				
	pr_input[8]:memb=4'd8;				
	pr_input[7]:memb=4'd7;				
	pr_input[6]:memb=4'd6;				
	pr_input[5]:memb=4'd5;				
	pr_input[4]:memb=4'd4;				
	pr_input[3]:memb=4'd3;				
	pr_input[2]:memb=4'd2;				
	pr_input[1]:memb=4'd1;
	pr_input[0]:memb=4'd0;	
endcase
if((memb-sh_amt_reg[3:0])>=0)
position=memb-sh_amt_reg[3:0];
else
position=(16'd16+memb-sh_amt_reg[3:0]);
case(position)
	4'd15:temp_win=16'b1000000000000000;			
	4'd14:temp_win=16'b0100000000000000;				
	4'd13:temp_win=16'b0010000000000000;				
	4'd12:temp_win=16'b0001000000000000;				
	4'd11:temp_win=16'b0000100000000000;				
	4'd10:temp_win=16'b0000010000000000;				
	4'd9:temp_win=16'b0000001000000000;				
	4'd8:temp_win=16'b0000000100000000;				
	4'd7:temp_win=16'b0000000010000000;				
	4'd6:temp_win=16'b0000000001000000;				
	4'd5:temp_win=16'b0000000000100000;				
	4'd4:temp_win=16'b0000000000010000;				
	4'd3:temp_win=16'b0000000000001000;				
	4'd2:temp_win=16'b0000000000000100;				
	4'd1:temp_win=16'b0000000000000010;				
	4'd0:temp_win=16'd1;						
endcase
if(bids==16'd0)nxt_wnnxt=0;
else nxt_wnnxt=temp_win;
end
assign wins=nxt_wnreg;
endmodule:`mname`
